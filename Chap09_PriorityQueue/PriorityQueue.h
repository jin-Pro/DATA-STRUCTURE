#ifndef __PRIORITY_QUEUE_H__
#define __PRIORITY_QUEUE_H__

#include "UsefulHeap.h"
/********************************************************************************************/
/*																							*/
/*   우선순위 큐																			*/
/*																							*/
/*  - 이진트리의 연장선																		*/
/*  - 비선형자료																			*/
/*  - 일반적인 큐는 FIFO																	*/
/*  - 우선순위 큐의 나가는 순서는 우선순위 근거로 나간다.									*/
/*   ex) 응급상황																			*/
/*  - 우선순위는 프로그램 사용자가 지정한다.												*/
/*																							*/
/*																							*/
/*   배열의 단점																			*/
/*																							*/
/*   - 데이터를 '삽입' 및 '삭제'하는 과정에서 데이터를 한 칸씩 이동하는 연산이 필요하다.	*/
/*   - '삽입의 위치'를 찾기 위해 모든 데이터와 비교하여야한다.								*/
/*																							*/
/*   연결리스트의 단점																		*/
/*   - '삽입의 위치'를 찾기 위해 모든 데이터와 비교하여야한다.								*/
/*																							*/
/*    힙																					*/
/*   - 배열과 연결리스트의 단점이 '힙'에는 존재하지 않는다.									*/
/*   - 완전 이진 트리 (차곡 차곡 데이터를 쌓는 트리)										*/
/*   - 모든 노드에 저장된 값은 자식 노드에 저장된 값보다 크거나 같아야한다.					*/
/*     = 루트 노드에 저장된 값이 가장 커(우선순위가 높다)야 한다.							*/
/********************************************************************************************/
typedef Heap PQueue;
typedef HData PQData;

void PQueueInit(PQueue * ppq, PriorityComp pc);
int PQIsEmpty(PQueue * ppq);

void PEnqueue(PQueue * ppq, PQData data);
PQData PDequeue(PQueue * ppq);

#endif